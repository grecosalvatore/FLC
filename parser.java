
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jul 26 15:26:27 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Jul 26 15:26:27 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\003\005\000\002\005" +
    "\014\000\002\005\014\000\002\005\014\000\002\004\002" +
    "\000\002\004\005\000\002\013\004\000\002\006\005\000" +
    "\002\006\005\000\002\010\006\000\002\015\005\000\002" +
    "\015\007\000\002\007\002\000\002\007\003\000\002\011" +
    "\003\000\002\011\005\000\002\012\007\000\002\014\006" +
    "\000\002\014\006\000\002\014\010\000\002\022\006\000" +
    "\002\022\010\000\002\021\006\000\002\021\006\000\002" +
    "\021\004\000\002\021\010\000\002\021\010\000\002\021" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\004" +
    "\000\002\020\010\000\002\020\010\000\002\020\006\000" +
    "\002\016\004\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000" +
    "\004\002\167\001\002\000\004\012\041\001\002\000\010" +
    "\004\011\005\010\006\007\001\002\000\004\030\040\001" +
    "\002\000\004\030\030\001\002\000\004\030\012\001\002" +
    "\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000\010\004" +
    "\015\005\014\006\007\001\002\000\004\030\023\001\002" +
    "\000\004\030\016\001\002\000\006\005\ufffc\006\ufffc\001" +
    "\002\000\006\005\020\006\007\001\002\000\004\030\021" +
    "\001\002\000\006\006\ufffc\012\ufffc\001\002\000\006\006" +
    "\007\012\uffff\001\002\000\006\004\ufffc\006\ufffc\001\002" +
    "\000\006\004\025\006\007\001\002\000\004\030\026\001" +
    "\002\000\006\006\ufffc\012\ufffc\001\002\000\006\006\007" +
    "\012\ufffe\001\002\000\006\004\ufffc\006\ufffc\001\002\000" +
    "\006\004\032\006\007\001\002\000\004\030\033\001\002" +
    "\000\006\004\ufffc\006\ufffc\001\002\000\006\004\035\006" +
    "\007\001\002\000\004\030\036\001\002\000\006\006\ufffc" +
    "\012\ufffc\001\002\000\006\006\007\012\ufffd\001\002\000" +
    "\012\004\ufffb\005\ufffb\006\ufffb\012\ufffb\001\002\000\004" +
    "\036\044\001\002\000\004\002\000\001\002\000\010\002" +
    "\ufff4\013\062\036\044\001\002\000\004\011\050\001\002" +
    "\000\004\036\044\001\002\000\004\036\044\001\002\000" +
    "\010\002\ufff9\013\ufff9\036\ufff9\001\002\000\004\036\052" +
    "\001\002\000\006\027\055\030\056\001\002\000\004\041" +
    "\053\001\002\000\004\007\054\001\002\000\006\027\ufff6" +
    "\030\ufff6\001\002\000\004\036\057\001\002\000\010\002" +
    "\ufff7\013\ufff7\036\ufff7\001\002\000\004\041\060\001\002" +
    "\000\004\007\061\001\002\000\006\027\ufff5\030\ufff5\001" +
    "\002\000\004\036\072\001\002\000\006\002\ufff2\013\ufff2" +
    "\001\002\000\006\002\ufff3\013\062\001\002\000\004\002" +
    "\ufffa\001\002\000\004\036\044\001\002\000\010\002\ufff8" +
    "\013\ufff8\036\ufff8\001\002\000\004\013\062\001\002\000" +
    "\006\002\ufff1\013\ufff1\001\002\000\004\014\073\001\002" +
    "\000\004\036\074\001\002\000\006\022\076\023\075\001" +
    "\002\000\006\024\115\031\114\001\002\000\004\031\100" +
    "\001\002\000\006\002\ufff0\013\ufff0\001\002\000\004\037" +
    "\102\001\002\000\006\027\106\030\107\001\002\000\004" +
    "\015\103\001\002\000\004\037\104\001\002\000\004\010" +
    "\105\001\002\000\006\027\uffec\030\uffec\001\002\000\004" +
    "\037\110\001\002\000\006\002\uffef\013\uffef\001\002\000" +
    "\004\015\111\001\002\000\004\037\112\001\002\000\004" +
    "\010\113\001\002\000\006\027\uffeb\030\uffeb\001\002\000" +
    "\004\036\147\001\002\000\004\040\116\001\002\000\004" +
    "\031\117\001\002\000\004\036\121\001\002\000\006\027" +
    "\135\030\136\001\002\000\006\021\124\040\123\001\002" +
    "\000\004\017\133\001\002\000\004\016\132\001\002\000" +
    "\004\040\130\001\002\000\010\017\126\027\uffe2\030\uffe2" +
    "\001\002\000\004\021\124\001\002\000\006\027\uffe4\030" +
    "\uffe4\001\002\000\004\020\131\001\002\000\010\017\uffdd" +
    "\027\uffdd\030\uffdd\001\002\000\010\017\uffde\027\uffde\030" +
    "\uffde\001\002\000\004\040\123\001\002\000\006\027\uffe3" +
    "\030\uffe3\001\002\000\004\036\137\001\002\000\006\002" +
    "\uffed\013\uffed\001\002\000\006\021\124\040\123\001\002" +
    "\000\004\017\144\001\002\000\010\017\142\027\uffdf\030" +
    "\uffdf\001\002\000\004\021\124\001\002\000\006\027\uffe1" +
    "\030\uffe1\001\002\000\004\040\123\001\002\000\006\027" +
    "\uffe0\030\uffe0\001\002\000\006\027\156\030\157\001\002" +
    "\000\006\021\124\040\123\001\002\000\004\017\154\001" +
    "\002\000\010\017\152\027\uffe8\030\uffe8\001\002\000\004" +
    "\021\124\001\002\000\006\027\uffea\030\uffea\001\002\000" +
    "\004\040\123\001\002\000\006\027\uffe9\030\uffe9\001\002" +
    "\000\004\036\160\001\002\000\006\002\uffee\013\uffee\001" +
    "\002\000\006\021\124\040\123\001\002\000\004\017\165" +
    "\001\002\000\010\017\163\027\uffe5\030\uffe5\001\002\000" +
    "\004\021\124\001\002\000\006\027\uffe7\030\uffe7\001\002" +
    "\000\004\040\123\001\002\000\006\027\uffe6\030\uffe6\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\010\003\003\004\005\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\021\001\001\000\002\001\001" +
    "\000\004\004\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\026\001\001\000\002\001\001\000\004" +
    "\004\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\042\010\044\013\041\001\001\000\002" +
    "\001\001\000\012\007\064\010\065\011\063\012\062\001" +
    "\001\000\002\001\001\000\004\010\045\001\001\000\004" +
    "\010\046\001\001\000\002\001\001\000\004\015\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\067\001\001\000" +
    "\002\001\001\000\004\010\066\001\001\000\002\001\001" +
    "\000\004\012\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\117" +
    "\001\001\000\002\001\001\000\006\016\124\017\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\140\017\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\142\001" +
    "\001\000\002\001\001\000\004\016\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\150\017\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\152" +
    "\001\001\000\002\001\001\000\004\016\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\161\017\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\163\001\001\000\002\001\001\000\004" +
    "\016\165\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public static HashMap table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // disc ::= DISC PRICE EURO 
            { parser.Tree.reduce(3,"disc",0);
              Float RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*disc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= PRICE EUROKM 
            { parser.Tree.reduce(2,"exp",0);
              Float RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expenseextral ::= expenseextral CM QSTRING exp 
            { parser.Tree.reduce(4,"expenseextral",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
						float distance = (float)h.get((String)parser.stack(-8));
						float res = distance *e ;
						float discount = (float)parser.stack(-5);
						res = res - discount;
						System.out.println(s + " " + res);
						if (ex<res){
							RESULT = ex;
						}else{
							RESULT = res;						
						}
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expenseextral ::= expenseextral CM QSTRING disc LINE exp 
            { parser.Tree.reduce(6,"expenseextral",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-12));
							float distance = (float)h.get((String)parser.stack(-10));
							float res = distance *e - d;
							float discount = (float)parser.stack(-7);
							res = res - discount;
							System.out.println(s + " " + res);
							if (ex<res){
								RESULT = ex;
							}else{
								RESULT = res;						
							}
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expenseextral ::= expenseextral CM QSTRING exp LINE disc 
            { parser.Tree.reduce(6,"expenseextral",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-12));
							float distance = (float)h.get((String)parser.stack(-10));
							float res = distance *e - d;
							float discount = (float)parser.stack(-7);
							res = res - discount;
							System.out.println(s + " " + res);
							if (ex<res){
								RESULT = ex;
							}else{
								RESULT = res;						
							}
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expenseextral ::= QSTRING exp 
            { parser.Tree.reduce(2,"expenseextral",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-8));
						float distance = (float)h.get((String)parser.stack(-6));
						float res = distance *e ;
						float discount = (float)parser.stack(-3);
						res = res - discount;
						System.out.println(s+ " " + res);
						RESULT = res;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expenseextral ::= QSTRING disc LINE exp 
            { parser.Tree.reduce(4,"expenseextral",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
						float distance = (float)h.get((String)parser.stack(-8));
						float res = distance *e - d;
						float discount = (float)parser.stack(-5);
						res = res - discount;
						System.out.println(s + " " + res);
						RESULT = res;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expenseextral ::= QSTRING exp LINE disc 
            { parser.Tree.reduce(4,"expenseextral",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
						float distance = (float)h.get((String)parser.stack(-8));
						float res = distance *e - d;
						float discount = (float)parser.stack(-5);
						res = res - discount;
						System.out.println(s + " " + res);
						RESULT = res;
						
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expenseextral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expensel ::= expensel CM QSTRING exp 
            { parser.Tree.reduce(4,"expensel",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-8));
						float distance = (float)h.get((String)parser.stack(-6));
						float res = distance *e ;
						System.out.println(s + " " + res);
						if (ex<res){
							RESULT = ex;
						}else{
							RESULT = res;						
						}
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expensel ::= expensel CM QSTRING disc LINE exp 
            { parser.Tree.reduce(6,"expensel",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
							float distance = (float)h.get((String)parser.stack(-8));
							float res = distance *e - d;
							System.out.println(s + " " + res);
							if (ex<res){
								RESULT = ex;
							}else{
								RESULT = res;						
							}
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expensel ::= expensel CM QSTRING exp LINE disc 
            { parser.Tree.reduce(6,"expensel",0);
              Float RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
							float distance = (float)h.get((String)parser.stack(-8));
							float res = distance *e - d;
							System.out.println(s + " " + res);
							if (ex<res){
								RESULT = ex;
							}else{
								RESULT = res;						
							}
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expensel ::= QSTRING exp 
            { parser.Tree.reduce(2,"expensel",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-6));
						float distance = (float)h.get((String)parser.stack(-4));
						float res = distance *e ;
						System.out.println(s + " " + res);
						RESULT = res;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expensel ::= QSTRING disc LINE exp 
            { parser.Tree.reduce(4,"expensel",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-8));
						float distance = (float)h.get((String)parser.stack(-6));
						float res = distance *e - d;
						System.out.println(s + " " + res);
						RESULT = res;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expensel ::= QSTRING exp LINE disc 
            { parser.Tree.reduce(4,"expensel",0);
              Float RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		HashMap h = (HashMap)parser.table.get((String)parser.stack(-8));
						float distance = (float)h.get((String)parser.stack(-6));
						float res = distance *e - d;
						System.out.println(s + " " + res);
						RESULT = res;
						
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expensel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // timel ::= timel CM UINT PERC UINT KMH 
            { parser.Tree.reduce(6,"timel",0);
              Object[] RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object[] t = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					HashMap h = (HashMap)parser.table.get((String)parser.stack(-10));
					float distance = (float)h.get((String)parser.stack(-8));
					float tot = distance * p /100 / s;
					int count = Integer.parseInt(t[0].toString()) + 1 ;
					System.out.println(count + " " + tot);
					RESULT  = new Object[2];
					RESULT[0] = new Integer(count);
					RESULT[1] = new Float(tot + Float.parseFloat(t[1].toString())); 
					 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*timel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // timel ::= UINT PERC UINT KMH 
            { parser.Tree.reduce(4,"timel",0);
              Object[] RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					HashMap h = (HashMap)parser.table.get((String)parser.stack(-8));
					String name = (String)parser.stack(-6);
					
					float distance = (float) h.get(name);
					float tot = distance * p /100 / s;
					System.out.println("0 " + tot);
					RESULT  = new Object[2];
					RESULT[0] = new Integer(0);
					RESULT[1] = new Float(tot); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(16/*timel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= EXPENSE EXTRA PRICE COL expenseextral S 
            { parser.Tree.reduce(6,"type",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//here can print the min
							System.out.println("MIN: " + e);
							
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= EXPENSE COL expensel S 
            { parser.Tree.reduce(4,"type",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//here can print the min
							System.out.println("MIN: " + e);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= TIME COL timel S 
            { parser.Tree.reduce(4,"type",0);
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] t = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						//here can print the total
						float tot = Float.parseFloat(t[1].toString());
						System.out.println("TOT: " + tot);
			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // el ::= COMPUTE QSTRING TO QSTRING type 
            { parser.Tree.reduce(5,"el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nel ::= nel el el 
            { parser.Tree.reduce(3,"nel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*nel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nel ::= el 
            { parser.Tree.reduce(1,"nel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*nel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // computel ::= nel 
            { parser.Tree.reduce(1,"computel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*computel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // computel ::= 
            { parser.Tree.reduce(0,"computel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*computel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // destinationl ::= destinationl CM QSTRING FLOAT_TYPE KM 
            { parser.Tree.reduce(5,"destinationl",0);
              HashMap RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap h = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h.put(s, f);
							    RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*destinationl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // destinationl ::= QSTRING FLOAT_TYPE KM 
            { parser.Tree.reduce(3,"destinationl",0);
              HashMap RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 HashMap h = new HashMap();
			 h.put(s, f);
			 RESULT = h;	
			
              CUP$parser$result = new java_cup.runtime.Symbol(11/*destinationl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // distance ::= QSTRING ARROW destinationl S 
            { parser.Tree.reduce(4,"distance",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap h = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			//put inside global hashtable
			parser.table.put(s,h); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*distance*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // distancel ::= distancel distance distance 
            { parser.Tree.reduce(3,"distancel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*distancel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // distancel ::= distance distance distance 
            { parser.Tree.reduce(3,"distancel",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*distancel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // commands ::= distancel computel 
            { parser.Tree.reduce(2,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // token3_l ::= token3_l TOKEN3 S 
            { parser.Tree.reduce(3,"token3_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*token3_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // token3_l ::= 
            { parser.Tree.reduce(0,"token3_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*token3_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= token3_l TOKEN2 S token3_l TOKEN1 S token3_l TOKEN1 S token3_l 
            { parser.Tree.reduce(10,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= token3_l TOKEN1 S token3_l TOKEN2 S token3_l TOKEN1 S token3_l 
            { parser.Tree.reduce(10,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= token3_l TOKEN1 S token3_l TOKEN1 S token3_l TOKEN2 S token3_l 
            { parser.Tree.reduce(10,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP commands 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

